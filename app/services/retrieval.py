import boto3
import json
import numpy as np
from langchain.schema import Document
from sqlalchemy.future import select
from sklearn.metrics.pairwise import cosine_similarity
from app.models.document import Document as DBDocument

# Initialize Bedrock client using boto3
bedrock_client = boto3.client("bedrock-runtime", region_name="ap-south-1")  # Update the region as needed

# Model name, can be switched between 7b, 13b, or 70b
MODEL_NAME = "mistral.mistral-7b-instruct-v0:2"  # Change to desired model

async def retrieve_relevant_documents(question: str, db):
    """
    Retrieves relevant documents using cosine similarity based on embeddings
    generated by AWS Bedrock.
    """
    print(f"db type: {type(db)}") 
    try:
        # Generate question embedding using AWS Bedrock (Mistral model)
        question_embedding = await generate_embedding_from_bedrock(question)

        # Fetch all documents from the DB
        result = await db.execute(select(DBDocument))
        documents = result.scalars().all()
        # Compute similarity scores between the question and documents
        results = []
        for doc in documents:
            doc_embedding = np.array(doc.embedding)  # Assuming embeddings are stored as JSON
            results.append((doc, doc_embedding))
        # Sort by similarity and return top 5 documents
        results = sorted(results, key=lambda x: x[1], reverse=True)[:5]
        return [Document(page_content=doc.content, metadata={"title": doc.title}) for doc, _ in results]
    except Exception as e:
        print(f"Error in retrieve_relevant_documents: {e}")
        raise


async def generate_embedding_from_bedrock(text: str):
    try:
        payload = {
            "prompt": text,
            "max_tokens": 100,
            "temperature": 0.75,
            "top_p": 1.0
        }

        payload_json = json.dumps(payload)

        response = bedrock_client.invoke_model(
            modelId=MODEL_NAME, 
            body=payload_json,
            contentType="application/json",
            accept="application/json"
        )

        response_body = response["body"].read().decode("utf-8")
        response_data = json.loads(response_body)

        outputs = response_data.get("outputs", [])
        if not outputs:
            raise ValueError("No outputs found in Bedrock response.")

        text = outputs[0].get("text", "").strip()
        if not text:
            raise ValueError("No text found in Bedrock response.")

        # Simulate generating embeddings from the output text
        embedding = np.array([ord(char) for char in text], dtype=np.float32)  # Example: ASCII values
        return embedding
    except Exception as e:
        print(f"Error generating embedding from Bedrock: {e}")
        raise
